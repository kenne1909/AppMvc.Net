@using Microsoft.EntityFrameworkCore

@inject AppDbContext dbContext;
@{
    ViewData["Title"]="Thông tin Db";
    var connect = dbContext.Database.GetDbConnection();
    var dbName=connect.Database;
    var can_connect= dbContext.Database.CanConnect();// nếu bằng true thì có thể truy vấn để kết nối dl/fale là k tồn tại or k chạy

    //dbContext.Database.GetPendingMigrations();//lấy ds các migration ở trạng thái pending
    //dbContext.Database.GetAppliedMigrations();//lấy ds các migration đã đc cập nhật lên server

}

<partial name="_AlertMessage"/>

<h1>Thông tin về cơ sở dữ liệu</h1> 
<p>- Database: @dbName</p>
<p>- Source: @connect.DataSource</p>
<p>- State: @connect.State</p>

<hr>
<h2>Migrations</h2>
@foreach(var migration in  dbContext.Database.GetAppliedMigrations())
{
    <p>@migration</p>
}

@foreach(var migration in  dbContext.Database.GetPendingMigrations())
{
    <p>@migration (pending)</p>
}

@if(!can_connect)
{
    <p class="alert alert-danger">Không có khả năng kết nối đến database</p>
}

@if(dbContext.Database.GetPendingMigrations().Any())
{
    <form method="post">
        <button class="btn btn-success" asp-action="Migrate">Tạo Db (Cập nhật migration)</button>
    </form>
}

@if(can_connect)
{
    <h2>Các Table</h2>
    await dbContext.Database.OpenConnectionAsync();// mở kết nối

    var table = dbContext.Database.GetDbConnection().GetSchema("Tables");//lấy về thông tin về các table
    <ul>
        @foreach(System.Data.DataRow row in table.Rows)
        {
            <li>@row["TABLE_NAME"];</li>
        }
    </ul>

    <a class="btn btn-danger" asp-action="DeleteDb">Xóa Database: @dbName</a>
    
}